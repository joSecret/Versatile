<?php

/**
 * @file
 * Versatile Theme theme file.
 */

use Drupal\block\Entity\Block;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_page_attachments_alter().
 */
function versatile_page_attachments_alter(array &$page) {
  include 'theme-settings/style-root.inc';
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
function versatile_preprocess_menu_local_task(&$variables) {
  if (isset($variables['is_active']) && $variables['is_active'] === TRUE) {
    $variables['link']['#options']['attributes']['class'][] = 'active is-active';
  }
  else {
    $variables['link']['#options']['attributes']['class'][] = 'nav-link';
  }

  if (isset($variables['element']['#level'])) {
    $variables['level'] = $variables['element']['#level'];
  }
}

/**
 * Implements theme_preprocess_status_messages().
 */
function versatile_preprocess_status_messages(&$variables) {
  $variables['status_message_type'] = theme_get_setting('sg__status_message_type');
}

/**
 * Implements theme_preprocess_page().
 */
function versatile_preprocess_page(&$variables) {
  $variables['global'] = [
    'container' => theme_get_setting('sg__container'),
  ];

  // Navbar settings.
  $variables['navbar'] = [
    'position' => theme_get_setting('ns__navbar_position'),
    'expand' => theme_get_setting('ns__navbar_expand'),
    'color' => theme_get_setting('ns__navbar_color'),
    'bg' => theme_get_setting('ns__navbar_bg'),
    'out' => theme_get_setting('ns__navbar_out'),
    'align' => theme_get_setting('ns__navbar_align'),
  ];
}

/**
 * Implements theme_preprocess_block().
 */
function versatile_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] == 'system_branding_block') {
    $variables['#cache']['contexts'][] = 'languages:language_interface';
    $languages = \Drupal::config('language.negotiation')->get('url.prefixes');
    $current_langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    if (!empty($languages[$current_langcode]) && theme_get_setting('versatile_default_logo_' . $current_langcode) == 0) {
      if (!empty(theme_get_setting('versatile_' . $current_langcode . '_logo_path'))) {
        $variables['site_logo'] = \Drupal::service('file_url_generator')->generateAbsoluteString(theme_get_setting('versatile_' . $current_langcode . '_logo_path'));
      }
    }
  }
}

/**
 * Implements theme_preprocess_datetime_form().
 */
function versatile_preprocess_datetime_form(&$variables) {
  $variables['attributes']['class'][] = 'form-inline';
}

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function versatile_preprocess_region(&$variables) {
  if (theme_get_setting('sr__class_' . $variables['elements']['#region']) !== NULL) {
    $classes = explode(" ", theme_get_setting('sr__class_' . $variables['elements']['#region']));
    $variables['attributes']['class'] = $classes;
  }

  if (theme_get_setting('sr__clean_' . $variables['elements']['#region']) !== NULL) {
    $variables['wrapper'] = theme_get_setting('sr__clean_' . $variables['elements']['#region']);
  }

  if (theme_get_setting('sr__container_' . $variables['elements']['#region']) !== NULL) {
    $variables['container']['type'] = theme_get_setting('sr__container_' . $variables['elements']['#region']);
  }

  if (theme_get_setting('sr__container_position_' . $variables['elements']['#region']) !== NULL) {
    $variables['container']['position'] = theme_get_setting('sr__container_position_' . $variables['elements']['#region']);
  }

  if (theme_get_setting('sr__extra_class_' . $variables['elements']['#region']) !== NULL) {
    $variables['extra_classes'] = theme_get_setting('sr__extra_class_' . $variables['elements']['#region']);
  }
}

/**
 * Implements hook_theme_suggestions_alter()
 */
function versatile_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if (
    isset($variables['element']['#form_inline'])
  ) {
    $element = $variables['element'];
    $formid = str_replace('-', '_', $element['#form_inline']);
    $suggestions[] = $hook . '__input_group';
    $suggestions[] = $hook . '__input_group__' . $formid;
  }

  switch ($hook) {
    case 'block':
      if (!empty($variables['elements']['#id'])) {
        $block = Block::load($variables['elements']['#id']);
        if (!empty($block) && !empty($block->getRegion())) {
          array_splice($suggestions, 2, 0, $hook . '__region__' . $block->getRegion());
        }
      }

      if (isset($variables['elements']['content']['#block_content'])) {
        $bundle = $variables['elements']['content']['#block_content']->bundle();
        array_splice($suggestions, 3, 0, $hook . '__block_content__' . $bundle);
        if ($bundle == 'c_blocks') {
          $block_id = str_replace('-', '_', $variables['elements']['content']['#block_content']->get('field_block_custom_id')
            ->getString());
          array_splice($suggestions, 4, 0, $hook . '__custom_block__' . $block_id);
        }
      }
      break;

    case 'field':
      $element = $variables['element'];
      $suggestions[] = $hook . '__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#view_mode'];
      $suggestions[] = $hook . '__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#bundle'] . '__' . $element['#view_mode'];
      break;

    case 'taxonomy_term':
      $term = $variables['elements']['#taxonomy_term'];
      $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
      array_splice($suggestions, 0, 0, $hook . '__' . $sanitized_view_mode);
      array_splice($suggestions, 2, 0, $hook . '__' . $term->bundle() . '__' . $sanitized_view_mode);
      break;

    case 'paragraph':
      $paragraph = $variables['elements']['#paragraph'];
      $parent = $paragraph->getParentEntity();
      if ($parent) {
        array_splice($suggestions, 1, 0, 'paragraph__' . $parent->bundle() . '__' . $paragraph->bundle());
        array_splice($suggestions, 2, 0, 'paragraph__' . $parent->bundle() . '__' . $variables['elements']['#view_mode']);
        $suggestions[] = 'paragraph__' . $parent->bundle() . '__' . $paragraph->bundle() . '__' . $variables['elements']['#view_mode'];
      }
      break;

    case 'page':
      if (\Drupal::routeMatch()
        ->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()
        ->getRawParameter('taxonomy_term')) {
        $term = Term::load($tid);
        array_splice($suggestions, 1, 0, $hook . '__taxonomy__' . $term->bundle());
      }

      if ($node = \Drupal::request()->attributes->get('node')) {
        array_splice($suggestions, 1, 0, $hook . '__node__' . $node->getType());
      }

      if ($view = \Drupal::request()->attributes->get('view_id')) {
        $suggestions[] = $hook . '__view';
        $suggestions[] = $hook . '__view__' . $view;
      }
      break;

    case 'form':
      $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
      break;

    default:
      break;
  }
}

/**
 * Implements versatile_form_alter()
 */
function versatile_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'search_block_form') {
    $form['keys']['#attributes']['placeholder'] = t('Search...');
  }

  if ($form_id == 'views_exposed_form') {
    $form['query'] = [
      '#type' => 'search',
    ];
    $form['query']['#attributes']['placeholder'] = t('Search');
  }
}



/**
 * Implements template_preprocess_views_view()
 * @param array $vars
 */
function versatile_preprocess_views_view(&$vars){
    $vars['more']['#options']['attributes']['class'] = [
      'btn',
      'btn-primary',
      'btn-icon',
      'icon-arrow',
    ];
}

/**
 * Implements hook_theme().
 */
function versatile_theme($existing, $type, $theme, $path) {
  return [
    'views-exposed-form-all-news-page-1' => [
      'render element' => 'form',
    ],
    'views-exposed-form-all-events-page-1' => [
      'render element' => 'form',
    ],
    'views-exposed-form-private-sector-signatories-page-1' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function versatile_preprocess_node(&$variables) {
  // Check if the current view mode is 'full'.
  if ($variables['view_mode'] === 'inner_page_header') {
    $node = $variables['node'];

    $bundles = [
      'news',
      'events'
    ];

    // Check if the node bundle is 'news'.
    if (in_array($node->bundle(), $bundles)) {
      // Check if the 'field_published' field is empty.
      if (empty($node->field_published->value)) {
        // Render the node's created date instead.
        $variables['content']['field_published'][0] = [
          '#markup' => Drupal::service('date.formatter')->format($node->getCreatedTime(), 'medium'),
        ];
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function versatile_preprocess(&$variables, $hook) {
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['language'] = $language;
}
